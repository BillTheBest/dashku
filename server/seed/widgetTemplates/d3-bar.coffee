module.exports =
  name: 'D3 Bar'
  json: '{ "data": [\n    {\n      "name": "thing",\n      "a": 1000,\n      "b": 100\n    },\n    {\n      "name": 2,\n      "a": 10000,\n      "b": 1000\n    },\n    {\n      "name": "foo",\n      "a": 100\n    },\n    {\n      "name": [\n        "a",\n        "b"\n      ],\n      "a": 2000,\n      "b": 55\n    },\n    {\n      "name": "other",\n      "a": 1022,\n      "b": 100\n    },\n    {\n      "name": 42,\n      "a": 2010,\n      "b": 55\n    }\n  ] }'
  script: '(function () {\n  // This bar chart is responsive to size, magnitude of data\n  // and number of data points provided.\n  // It takes the entire data array in every transmission, instead of\n  // incremental updates.\n\n  // in the data array:\n  // "name" should stringify to something unique\n  // "a" primary numeric value is required\n  // "b" secondary numeric value is optional\n\n  // Built in example data generator is disabled when it first\n  // receives real data, but should be commented out for production.\n\n  var widget = this.widget.get(0)\n    , self = this\n\n  self.on(\'load\', function () {\n    head.js(\'javascripts/d3.v2.min.js\')\n    head.ready(function () {\n      var cHeight = self.widget.height()\n        , cWidth = self.widget.width()\n        , bFontSize = d3.min([cHeight, cWidth])/20\n        , margin = {top: 0, right: 10, bottom: bFontSize + 20, left: 10}\n        , width = cWidth - margin.left - margin.right\n        , height = cHeight - margin.top - margin.bottom\n        , svg = d3.select(widget)\n          .append(\'svg\')\n            .attr("width", width + margin.left + margin.right) \n            .attr("height", height + margin.bottom + margin.top) \n        , bg = svg.append("g") \n            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")\n        , chart = svg.append("g") \n            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")\n\n      chart.append(\'line\')\n        .attr(\'x1\', 0)\n        .attr(\'x2\', width)\n        .attr(\'y1\', height)\n        .attr(\'y2\', height)\n\n      self.on(\'transmission\', update)\n\n      // Comment out next line for production widget.\n      var testing = setInterval(test(10), 3000)\n\n      function update (data) {\n        // bring widget out of testing mode if it receives real data\n        if (data.apiKey) clearInterval(testing)\n        data = data.data.sort(function (one, two) {\n          if (one.a > two.a) return -1\n          else if (one.a < two.a) return 1\n          else return 0\n        })\n        var x = d3.scale.log()\n              .domain([1, d3.max(data.map(function (i) { return i.a + (i.b || 0)}))])\n              .range([0, width])\n          , y = d3.scale.linear()\n              .domain([0, data.length])\n              .range([0, height])\n          , h = height/data.length * .8\n          , fontSize = h *.8\n          , a = chart.selectAll(\'.a\')\n              .data(data, get(\'name\'))\n          , b = chart.selectAll(\'.b\')\n              .data(data, get(\'name\'))\n          , txt = chart.selectAll(\'.txt\')\n              .data(data, get(\'name\'))\n          , ticks = x.ticks().filter(function (ele, idx, arr) {\n            var len = 10\n            if (idx/len === Math.floor(idx/len)) return true\n          })\n          , rule = bg.selectAll(\'.rule\')\n              .data(ticks)\n          , label = chart.selectAll(\'.mark\')\n              .data(ticks)\n\n        // UPDATE\n        rule.transition().duration(1000)\n            .attr(\'x1\', x)\n            .attr(\'x2\', x)\n            .attr(\'y1\', 0)\n            .attr(\'y2\', height)\n\n        label.transition().duration(1000)\n            .attr(\'class\', \'mark\')\n            .attr(\'y\', height)\n            .attr(\'dy\', bFontSize + 3)\n            .attr(\'text-anchor\', \'middle\')\n            .attr(\'font-size\', bFontSize)\n            .attr(\'x\', x)\n            .text(shortNum)\n\n        a.transition().duration(1000)\n          .attr(\'height\', h)\n          .attr(\'width\', getX)\n          .attr(\'y\', getY)\n\n        b.transition().duration(1000)\n          .attr(\'x\', getX)\n          .attr(\'height\', h)\n          .attr(\'width\', function (d, i) { return x(d.a + (d.b || 0)) - x(d.a) })\n          .attr(\'y\', getY)\n\n\n        txt.transition().duration(1000)\n          .attr(\'y\', negY)\n          .attr(\'dy\', h - 1)\n          .attr(\'font-size\', fontSize)\n          .attr(\'y\', getY)\n\n        // ENTER\n        rule.enter().append(\'line\')\n            .attr(\'class\', \'rule\')\n            .attr(\'y1\', 0)\n            .attr(\'y2\', height)\n            .attr(\'x1\', cWidth + 10)\n            .attr(\'x2\', cWidth + 10)\n          .transition().duration(1000)\n            .attr(\'x1\', x)\n            .attr(\'x2\', x)\n\n        label.enter().append(\'text\')\n            .attr(\'class\', \'mark\')\n            .attr(\'x\', cWidth + 10)\n            .attr(\'y\', height)\n            .attr(\'dy\', bFontSize + 3)\n            .attr(\'text-anchor\', \'middle\')\n            .attr(\'font-size\', bFontSize)\n            .text(shortNum)\n          .transition().duration(1000)\n            .attr(\'x\', x)\n\n        a.enter().append(\'rect\')\n            .attr(\'class\', \'a\')\n            .attr(\'y\', negY)\n            .attr(\'height\', h)\n            .attr(\'width\', getX)\n          .transition().duration(1000)\n            .attr(\'y\', getY)\n\n        b.enter().append(\'rect\')\n            .attr(\'class\', \'b\')\n            .attr(\'y\', negY)\n            .attr(\'height\', h)\n            .attr(\'x\', getX)\n            .attr(\'width\', function (d, i) { return x(d.a + (d.b || 0)) - x(d.a) })\n          .transition().duration(1000)\n            .attr(\'y\', getY)\n\n        txt.enter().append(\'text\')\n          .attr(\'class\', \'txt\')\n          .attr(\'y\', negY)\n          .attr(\'x\', 0)\n          .attr(\'dy\', h - 1)\n          .attr(\'font-size\', fontSize)\n          .attr(\'tet-anchor\', \'start\')\n          .text(get(\'name\'))\n        .transition().duration(1000)\n          .attr(\'y\', getY)\n\n       // EXIT\n       rule.exit().transition().duration(1000)\n           .attr(\'y1\', height)\n         .remove()\n\n       label.exit().transition().duration(1000)\n           .attr(\'y\', cHeight + bFontSize)\n         .remove()\n\n       a.exit().transition().duration(1000)\n           .attr(\'x\', -width )\n         .remove()\n\n       b.exit().transition().duration(1000)\n           .attr(\'x\', width * 2)\n         .remove()\n\n       txt.exit().transition().duration(1000)\n           .attr(\'x\', -width )\n         .remove()\n\n       function getX (d, i) {\n         return x(d.a)\n       }\n\n       function getY (d, i) {\n         return y(i)\n       }\n\n       function negY (d, i) {\n         return y(i) - height\n       }\n       function negX (d, i) {\n         return x(d.a) - width\n       }\n\n      }\n    })\n  })\n\n  // UTIL\n  function get (prop) {\n    return function (d) {\n      return d[prop]\n    }\n  }\n\n  function d (i) {\n    return i\n  }\n\n  function shortNum (num) {\n    if (num < 1000) return Math.floor(num) + \'\'\n    else if (num < 1000000) return Math.floor(num/1000) + \'k\'\n    else if (num < 1000000000) return Math.floor(num/1000000) + \'M\'\n    else if (num < 1000000000000) return Math.floor(num/1000000000) + \'B\'\n    else return Math.floor(num/1000000000000) + \'T\'\n  }\n\n  // TEST data generator\n  function test (num) {\n    var data\n      , testName = 0\n\n    more()\n    return more\n\n    function more () {\n      if (!data) {\n        data = d3.range(num).map(next)\n      } else {\n        data.map(function (i) {\n          var ran = Math.random()\n          i.a *= ran + .5\n          i.b *= ran + .5\n          return i\n        })\n        data.pop()\n        data.push(next())\n      }\n      self.emit(\'transmission\', { data: data })\n    }\n\n    function next () {\n      var v = ~~(Math.random() * 100000 )\n      return { name: testName += 2\n             , a: v\n             , b: v/9\n             }\n    }\n  }\n}.call(this))\n\n'
  css: 'svg text {\n  fill: white;\n}\n\n.a {\n  stroke: none;\n  fill: steelblue;\n}\n\n.b {\n  stroke: none;\n  fill: lightblue;\n}\n\nline {\n  stroke: white;\n}\n'
  html: ''
  snapshotUrl: "/images/widgetTemplates/d3Bar.png"

